from config import *
from db_operations import search


def ingredient_numerator(ingrid, user_id):
    number = "2"
    if ingrid in burg[str(user_id)]["ingredients"].keys():
        try:
            number = int(ingrid[-1]) + 1
            return ingredient_numerator(ingrid[:-2] + f" {number}", user_id)
        except:
            return ingredient_numerator(ingrid + f" {number}", user_id)
    else:
        return ingrid


# –î–∞–±–æ–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –±–æ–π
def wait_list(message):
    global gladiators
    gladiators.append(str(message.from_user.id))
    bot.send_message(message.chat.id, "–í—ã –≤ —Å–ø–∏—Å–∫–µ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –±–æ–π")
    if len(gladiators) >= 2:
        war_l = [x for x in figh]
        figh[str(int(war_l[-1]) + 1)] = gladiators[:2]
        del gladiators[:2]

        prep_fight(str(int(war_l[-1]) + 1))


# –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –±–æ—é
def prep_fight(id_fight):
    global figh
    users_id = figh[id_fight]
    for i in range(len(users_id)):
        bot.send_message(users_id[i], f"–í–∞—à –≤—Ä–∞–≥ - {search(users_id[i - 1])}")
        # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        burg[str(users_id[i])] = {"ingredients": {}, "thorns": 0, "color": 0, "god": 0}
        for v in (invent["inventar"][search(users_id[i])]["burger"]):
            # if v == "–ë—É–ª—É–∫–∞ ü•ñ":
            #     pass
            if v != '':
                v_with_num = ingredient_numerator(v, str(users_id[i]))
                burg[str(users_id[i])]["ingredients"][v_with_num] = [ingredient[v]['hp'], ingredient[v]['hp']]
    fight(id_fight)


# –ú–æ–¥—É–ª—å –±–æ—è
def fight(id_fight):
    useless = 0
    t = []
    z = []
    global figh
    global e_t
    global burg
    id_1 = figh[id_fight][0]
    id_2 = figh[id_fight][1]
    # –±–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ –º–æ–º–µ–Ω—Ç–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ—Ç–ª–µ—Ç—ã –≤ –±—É—Ä–≥–µ—Ä–µ
    while '–ö–æ—Ç–ª–µ—Ç–∞ üü§' in list(burg[str(id_1)]["ingredients"]) and "–ö–æ—Ç–ª–µ—Ç–∞ üü§" in list(burg[str(id_2)]["ingredients"]):
        list_id = list(burg[str(id_1)]["ingredients"])
        list_id_2 = list(burg[str(id_2)]["ingredients"])
        max_len = [len(list_id), len(list_id_2)]
        for g in range(0, max(max_len)):
            if g < len(list_id):
                try:
                    int(list_id[g][-1])
                    ingred = list_id[g][:-2]
                except:
                    ingred = list_id[g]
                e_t[id_fight] = "False"
                f = open("end_turn.json", 'w', encoding='utf8')
                json.dump(e_t, f, ensure_ascii=False)
                f.close()
                bot.send_message(int(id_1), f"–∞—Ç–∞–∫—É—é—â–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç - {ingred}")
                if ingred == "–ë—É–ª–∫–∞ ü•ñ":
                    e_t[id_fight] = "True"
                else:
                    ingredient[ingred]['skill'][0](str(id_fight), ingredient[ingred]['skill'][1], id_1, id_2, ingred)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–∞—è –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ-–±—ã –±–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫—É –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –ø–µ—Ä–≤—ã–π –Ω–µ –≤—ã–±—Ä–∞–ª –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            while e_t[id_fight] == "False":
                useless += 0
            if g < len(list_id_2):
                try:
                    int(list_id_2[g][-1])
                    ingred = list_id_2[g][:-2]
                except:
                    ingred = list_id_2[g]
                e_t[id_fight] = "False"
                f = open("end_turn.json", 'w', encoding='utf8')
                json.dump(e_t, f, ensure_ascii=False)
                f.close()
                bot.send_message(int(id_2), f"–∞—Ç–∞–∫—É—é—â–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç - {ingred}")
                if ingred == "–ë—É–ª–∫–∞ ü•ñ":
                    e_t[id_fight] = "True"
                else:
                    ingredient[ingred]['skill'][0](str(id_fight), ingredient[ingred]['skill'][1], id_2, id_1)
            while e_t[id_fight] == "False":
                useless += 0
        # –ü–æ–∏—Å–∫ —É–º–µ—Ä—â–∏—Ö –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
        for x, y in burg[str(id_1)]["ingredients"].items():
            if y[0] <= 0:
                z.append(x)
        for x, y in burg[str(id_2)]["ingredients"].items():
            if y[0] <= 0:
                t.append(x)
        # –£–¥–∞–ª–µ–Ω–∏–µ —É–º–µ—Ä—à–∏—Ö –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
        for i in t:
            del burg[str(id_2)]["ingredients"][i]
        for i in z:
            del burg[str(id_1)]["ingredients"][i]
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if '–ö–æ—Ç–ª–µ—Ç–∞ üü§' not in list(burg[str(id_1)]["ingredients"]):
            bot.send_message(int(id_1), f"–ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {search(id_2)}")
            invent['inventar'][search(id_2)]['many'] += 210
            bot.send_message(int(id_2), f"–ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {search(id_2)}")
            invent['inventar'][search(id_1)]['many'] += 120
            return
        elif '–ö–æ—Ç–ª–µ—Ç–∞ üü§' not in list(burg[str(id_2)]["ingredients"]):
            bot.send_message(int(id_1), f"–ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {search(id_1)}")
            invent['inventar'][search(id_1)]['many'] += 210
            bot.send_message(int(id_2), f"–ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {search(id_1)}")
            invent['inventar'][search(id_2)]['many'] += 120
            return
        else:
            bot.send_message(int(id_1), f"–°–ª–µ–¥—É—é—â–∏–π –∫—Ä—É–≥")
            bot.send_message(int(id_2), f"–°–ª–µ–¥—É—é—â–∏–π –∫—Ä—É–≥")

        t = []
        z = []

    del figh[id_fight]
    del burg[str(id_1)]
    del burg[str(id_2)]

    pass


# –§—É–Ω–∫—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
def damage(id_fight, value, id_1, id_2, ingred_1):
    global burg
    global inf
    global figh
    markup = types.InlineKeyboardMarkup(row_width=1)
    g = 0
    for i in burg[id_2]["ingredients"]:
        g += 1
        btn = types.InlineKeyboardButton(text=f"{g}: {i}", callback_data=f"place attack{i}")
        markup.add(btn)
    inf[str(id_1)] = [id_2, value, id_fight, ingred_1]
    bot.send_message(int(id_1), "–í–æ—Ç –∫—É–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É—Å–Ω—É—Ç—å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞", reply_markup=markup)
    f = open("trash.json", 'w', encoding='utf8')
    json.dump(inf, f, ensure_ascii=False)
    f.close()


def damage_play(id_1, ingred_2):
    global burg
    global inf
    global e_t
    id_1 = str(id_1)
    id_2 = str(inf[str(id_1)][0])
    ingred_1 = inf[str(id_1)][3]
    value = inf[str(id_1)][1]
    id_fight = inf[str(id_1)][2]
    if burg[id_2]["thorns"] != 0:
        burg[id_1]["ingredients"][ingred_1][0] -= burg[id_2]["thorns"]
        burg[id_2]["thorns"] = 0
    if burg[str(id_2)]["color"] == 1:
        burg[id_2]["ingredients"][ingred_2][0] -= int(value)
        burg[str(id_2)]["color"] = 0
    if burg[str(id_1)]["god"] == 1:
        burg[str(id_1)]["god"] = 0
        value = 0
    burg[id_2]["ingredients"][ingred_2][0] -= int(value)
    e_t[id_fight] = "True"
    del inf[str(id_1)]
    f = open("trash.json", 'w', encoding='utf8')
    json.dump(inf, f, ensure_ascii=False)
    f.close()


def heal(id_fight, value, id_1, id_2, ingred_1):
    global burg
    global inf
    markup = types.InlineKeyboardMarkup(row_width=1)
    g = 0
    id_1 = str(id_1)
    for i in burg[id_1]["ingredients"]:
        g += 1
        btn = types.InlineKeyboardButton(text=f"{g}: {i}", callback_data=f"place heal{i}")
        markup.add(btn)
    inf[id_1] = [id_2, value, id_fight, ingred_1]
    bot.send_message(int(id_1), "–í–æ—Ç –∫—É–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å—è", reply_markup=markup)
    f = open("trash.json", 'w', encoding='utf8')
    json.dump(inf, f, ensure_ascii=False)
    f.close()


def heal_play(id_1, ingred):
    global burg
    global e_t
    value = inf[str(id_1)][1]
    id_fight = inf[str(id_1)][2]
    if burg[str(id_1)]["ingredients"][ingred][0] + int(value) >= burg[str(id_1)]["ingredients"][ingred][1]:
        burg[str(id_1)]["ingredients"][ingred][0] = burg[str(id_1)]["ingredients"][ingred][1]
    else:
        burg[str(id_1)]["ingredients"][ingred][0] += int(value)
    e_t[id_fight] = "True"


def thorn(id_fight, value, id_1, id_2, ingred_1):
    global burg
    global figh
    global e_t
    bot.send_message(int(id_1), "–í–∞—à –±—É—Ä–≥–µ—Ä –∑–∞—à–∏–ø–æ–≤–∞–Ω")
    burg[str(id_1)]["thorns"] += int(value)
    e_t[id_fight] = "True"


def armor(id_fight, value, id_1, id_2, ingred_1):
    global burg
    markup = types.InlineKeyboardMarkup(row_width=1)
    g = 0
    for i in burg[id_1]["ingredients"]:
        g += 1
        btn = types.InlineKeyboardButton(text=f"{g}: {i}", callback_data=f"place armor{i}")
        markup.add(btn)
    inf[id_1] = [id_2, value, id_fight, ingred_1]
    bot.send_message(int(id_1), "–í–æ—Ç –∫—É–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—â–∏—Ç—ã", reply_markup=markup)
    f = open("trash.json", 'w', encoding='utf8')
    json.dump(inf, f, ensure_ascii=False)
    f.close()


def armor_play(id_1, ingred):
    global burg
    global e_t
    value = inf[str(id_1)][1]
    id_fight = inf[str(id_1)][2]
    burg[str(id_1)]["ingredients"][ingred][1] += int(value)
    burg[str(id_1)]["ingredients"][ingred][0] += int(value)
    e_t[id_fight] = "True"


def fire(id_fight, value, id_1, id_2, ingred_1):
    global burg
    markup = types.InlineKeyboardMarkup(row_width=1)
    g = 0
    for i in burg[id_1]["ingredients"]:
        g += 1
        btn = types.InlineKeyboardButton(text=f"{g}: {i}", callback_data=f"place fire{i}")
        markup.add(btn)
    inf[id_1] = [id_2, value, id_fight, ingred_1]
    bot.send_message(int(id_1), "–í–æ—Ç –∫—É–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∂–∞—Ä–∏—Ç—å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞", reply_markup=markup)
    f = open("trash.json", 'w', encoding='utf8')
    json.dump(inf, f, ensure_ascii=False)
    f.close()


def fire_play(id_1, ingred):
    global burg
    global e_t
    m = []
    id_2 = inf[str(id_1)][0]
    value = inf[str(id_1)][1]
    id_fight = inf[str(id_1)][2]
    for i in burg[str(id_2)]["ingredients"]:
        m.append(i)
    burg[str(id_2)]["ingredients"][ingred][0] -= int(value)
    if m.index(ingred) >= 1:
        burg[str(id_2)]["ingredients"][m[m.index(ingred) - 1]][0] -= int(value) // 2
    if m.index(ingred) <= len(m) - 2:
        burg[str(id_2)]["ingredients"][m[m.index(ingred) + 1]][0] -= int(value) // 2
    e_t[id_fight] = "True"


def vampirism(id_fight, value, id_1, id_2, ingred_1):
    global burg
    markup = types.InlineKeyboardMarkup(row_width=1)
    g = 0
    for i in burg[id_1]["ingredients"]:
        g += 1
        btn = types.InlineKeyboardButton(text=f"{g}: {i}", callback_data=f"place fire{i}")
        markup.add(btn)
    inf[id_1] = [id_2, value, id_fight, ingred_1]
    bot.send_message(int(id_1), "–í–æ—Ç –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã—Å–æ—Å–∞—Ç—å —Å–æ–∫", reply_markup=markup)


def vampirism_play(id_1, ingred):
    global burg
    id_2 = inf[str(id_1)][0]
    value = inf[str(id_1)][1]
    id_fight = inf[str(id_1)][2]
    burg[str(id_2)]["ingredients"][ingred][0] -= int(value)
    burg[str(id_1)]["ingredients"]['–∫—Ä–∞–ø–∏–≤–∞'][0] += int(value)
    burg[str(id_1)]["ingredients"]['–∫—Ä–∞–ø–∏–≤–∞'][1] += int(value)
    e_t[id_fight] = "True"


def coloring(id_fight, value, id_1, id_2, ingred_1):
    global burg
    burg[str(id_2)]["color"] = 1


def copy(id_fight, value, id_1, id_2, ingred_1):
    global burg
    markup = types.InlineKeyboardMarkup(row_width=1)
    g = 0
    for i in burg[str(id_2)]["ingredients"]:
        g += 1
        btn = types.InlineKeyboardButton(text=f"{g}: {i}", callback_data=f"place copy{i}")
        markup.add(btn)
    inf[id_1] = [id_2, value, id_fight, ingred_1]
    bot.send_message(int(id_1), "–í–æ—Ç —á—å–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", reply_markup=markup)


def copy_play(id_1, ingred):
    global burg
    id_2 = inf[str(id_1)][0]
    id_fight = inf[str(id_1)][2]
    del inf[str(id_1)]
    if ingredient[ingred]['skill'][0] == damage or ingredient[ingred]['skill'][0] == snipe:
        ingredient[ingred]['skill'][0](str(id_fight), ingred, ingredient[ingred]['skill'][1], id_1, id_2)
    elif ingredient[ingred]['skill'][0] != damage:
        ingredient[ingred]['skill'][0](str(id_fight), ingredient[ingred]['skill'][1], id_1, id_2)


def god(id_fight, value, id_1, id_2, ingred_1):
    global burg
    global inf
    global figh
    markup = types.InlineKeyboardMarkup(row_width=1)
    g = 0
    for i in burg[id_2]["ingredients"]:
        g += 1
        btn = types.InlineKeyboardButton(text=f"{g}: {i}", callback_data=f"place prov{i}")
        markup.add(btn)
    inf[id_1] = [id_2, value, id_fight, ingred_1]
    bot.send_message(int(id_1), "–í–æ—Ç –∫–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫–∞—Ä–∞—Ç—å ", reply_markup=markup)


def god_play(id_1, ingred_2):
    global burg
    global inf
    global e_t
    id_2 = inf[str(id_1)][0]
    ingred_1 = inf[str(id_1)][3]
    value = inf[str(id_1)][1]
    id_fight = inf[str(id_1)][2]
    burg[str(id_1)]["god"] = 1
    e_t[id_fight] = "True"
    del inf[str(id_1)]


def snipe(id_fight, value, id_1, id_2, ingred_1):
    global burg
    global inf
    global figh
    markup = types.InlineKeyboardMarkup(row_width=1)
    g = 0
    for i in burg[id_2]["ingredients"]:
        g += 1
        btn = types.InlineKeyboardButton(text=f"{g}: {i}", callback_data=f"place snipe1{i}")
        markup.add(btn)
    inf[str(id_1)] = [id_2, value, id_fight, ingred_1]
    bot.send_message(int(id_1), "–í–æ—Ç –∫—É–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–∞–π–ø–Ω—É—Ç—å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞", reply_markup=markup)
    f = open("trash.json", 'w', encoding='utf8')
    json.dump(inf, f, ensure_ascii=False)
    f.close()


def snipe_play(id_1, ingred_2):
    global burg
    global inf
    global e_t
    id_1 = str(id_1)
    id_2 = str(inf[str(id_1)][0])
    ingred_1 = inf[str(id_1)][3]
    value = inf[str(id_1)][1]
    id_fight = inf[str(id_1)][2]
    if burg[id_2]["thorns"] != 0:
        burg[id_1]["ingredients"][ingred_1][0] -= burg[id_2]["thorns"]
        burg[id_2]["thorns"] = 0
    if burg[str(id_2)]["color"] == 1:
        burg[id_2]["ingredients"][ingred_2][0] -= int(value)
        burg[str(id_2)]["color"] = 0
    if burg[str(id_1)]["god"] == 1:
        burg[str(id_1)]["god"] = 0
        value = 0
    burg[id_2]["ingredients"][ingred_2][0] -= int(value)
    del inf[str(id_1)]
    f = open("trash.json", 'w', encoding='utf8')
    json.dump(inf, f, ensure_ascii=False)
    f.close()
    snipe_2(id_fight, value, id_1, id_2, ingred_1)


def snipe_2(id_fight, value, id_1, id_2, ingred_1):
    global burg
    global inf
    global figh
    markup = types.InlineKeyboardMarkup(row_width=1)
    g = 0
    for i in burg[id_2]["ingredients"]:
        g += 1
        btn = types.InlineKeyboardButton(text=f"{g}: {i}", callback_data=f"place snipe2{i}")
        markup.add(btn)
    inf[str(id_1)] = [id_2, value, id_fight, "2" + ingred_1]
    bot.send_message(int(id_1), "–í–æ—Ç –∫—É–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–∞–π–ø–Ω—É—Ç—å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –≤–æ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑", reply_markup=markup)
    f = open("trash.json", 'w', encoding='utf8')
    json.dump(inf, f, ensure_ascii=False)
    f.close()


def snipe_2_play(id_1, ingred_2):
    global burg
    global inf
    global e_t
    id_1 = str(id_1)
    id_2 = str(inf[str(id_1)][0])
    ingred_1 = inf[str(id_1)][3][1:]
    value = inf[str(id_1)][1]
    id_fight = inf[str(id_1)][2]
    if burg[id_2]["thorns"] != 0:
        burg[id_1]["ingredients"][ingred_1][0] -= burg[id_2]["thorns"]
        burg[id_2]["thorns"] = 0
    if burg[str(id_2)]["color"] == 1:
        burg[id_2]["ingredients"][ingred_2][0] -= int(value)
        burg[str(id_2)]["color"] = 0
    if burg[str(id_1)]["god"] == 1:
        burg[str(id_1)]["god"] = 0
        value = 0
    burg[id_2]["ingredients"][ingred_2][0] -= int(value)
    e_t[id_fight] = "True"
    del inf[str(id_1)]
    f = open("trash.json", 'w', encoding='utf8')
    json.dump(inf, f, ensure_ascii=False)
    f.close()


ingredient = {
    '—Ç–æ–º–∞—Ç': {'hp': 100, 'skill': [heal, 52]}, '—Å–∞–ª–∞—Ç': {'hp': 130, 'skill': [heal, 35]},
    '–æ–≥—É—Ä–µ—Ü': {'hp': 80, 'skill': [damage, 75]}, '—Å–æ–ª—ë–Ω—ã–π_–æ–≥—É—Ä–µ—Ü': {'hp': 60, 'skill': [thorn, 30]},
    '–º–æ—Ä–∫–æ–≤—å': {'hp': 100, 'skill': [damage, 55]}, '—á–µ—Å–Ω–æ–∫': {'hp': 90, 'skill': [thorn, 15]},
    '–∫–∞–ø—É—Å—Ç–∞': {'hp': 160, 'skill': [heal, 25]}, '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å': {'hp': 50, 'skill': [damage, 100]},
    '—Ä–µ–ø–∞': {'hp': 30, 'skill': [heal, 80]}, '–∫—Ä–∞–ø–∏–≤–∞': {'hp': 500, 'skill': [vampirism, 25]},
    '–æ—Å—Ç—Ä—ã–π_–ø–µ—Ä–µ—Ü': {'hp': 300, 'skill': [fire, 150]}, "–ö–æ—Ç–ª–µ—Ç–∞ üü§": {'hp': 350, 'skill': [damage, 15]},
    '–ë—É–ª–∫–∞ ü•ñ': {'hp': 10000}, '–ª—É–∫': {'hp': 150, 'skill': [thorn, 30]},
    '—Å—ã—Ä': {'hp': 130, 'skill': [armor, 30]}, '—Å–≤—ë–∫–ª–∞': {'hp': 60, 'skill': [coloring, 0]},
    '–≥–æ—Ä–æ—Ö': {'hp': 60, 'skill': [copy, 0]}, '—Å–µ–ª—å–¥–µ—Ä–µ–π': {'hp': 130, 'skill': [damage, 100]},
    '–±–∞–∫–ª–∞–∂–∞–Ω': {'hp': 200, 'skill': [armor, 20]}, '—Ü–≤–µ—Ç–Ω–∞—è_–∫–∞–ø—É—Å—Ç–∞': {'hp': 130, 'skill': [snipe, 40]},
    '2—Ü–≤–µ—Ç–Ω–∞—è_–∫–∞–ø—É—Å—Ç–∞': {'hp': 130, 'skill': [snipe, 40]},
    '–ø–µ–∫–∏–Ω—Å–∫–∞—è_–∫–∞–ø—É—Å—Ç–∞': {'hp': 100, 'skill': [damage, 140]}, '–∫–∞–±–∞—á–æ–∫': {'hp': 200, 'skill': [heal, 100]},
    '—Ñ–∞—Å–æ–ª—å': {'hp': 100, 'skill': [coloring, 0]}, '–±—Ä—é–∫–≤–∞': {'hp': 100, 'skill': [armor, 52]},
    '—É–∫—Ä–æ–ø': {'hp': 75, 'skill': [copy, 0]},
    '–ª—É–∫_–ø–æ—Ä–µ–π': {'hp': 90, 'skill': [damage, 150]}, '—Ç—ã–∫–≤–∞': {'hp': 130, 'skill': [damage, 100]},
    '–∞—Ä–∞—Ö–∏—Å': {'hp': 130, 'skill': ['damage', 100]}, '—Ä—É–∫–∫–æ–ª–∞': {'hp': 130, 'skill': ['damage', 100]},
    '–±—Ä–æ–∫–∫–æ–ª–∏': {'hp': 130, 'skill': ['damage', 100]}, '—Ä–µ–¥–∏—Å': {'hp': 130, 'skill': ['damage', 100]},
    '–ø–µ—Ç—Ä—É—à–∫–∞': {'hp': 130, 'skill': ['damage', 100]}, '–∫–æ—Ä–Ω–∏—à–æ–Ω': {'hp': 130, 'skill': ['damage', 100]},
    '–∞–≤–æ–∫–∞–¥–æ': {'hp': 200, 'skill': ['god', 0]},
    '–±—Ä—é—Å–µ–ª—å—Å–∫–∞—è –∫–∞–ø—É—Å—Ç–∞': {'hp': 130, 'skill': ['damage', 100]},
    '–ø–∞—Ç–∏—Å—Å–æ–Ω': {'hp': 130, 'skill': ['damage', 100]}, '–º–∞–Ω–≥–æ–ª—å–¥': {'hp': 130, 'skill': ['damage', 100]}}
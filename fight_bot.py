from config import *
from db_operations import search


# –î–∞–±–æ–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –±–æ–π
def waiting_list(message):
    global gladiators
    gladiators.append(str(message.from_user.id))
    bot.send_message(message.chat.id, "–í—ã –≤ —Å–ø–∏—Å–∫–µ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –±–æ–π")
    print(gladiators)
    if len(gladiators) >= 2:
        war_l = [x for x in figh]
        figh[str(int(war_l[-1]) + 1)] = gladiators[:2]
        del gladiators[:2]

        prep_fight(str(int(war_l[-1]) + 1))


# –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –±–æ—é
def prep_fight(id_fight):
    global figh
    users_id = figh[id_fight]
    for i in range(len(users_id)):
        bot.send_message(users_id[i], f"–í–∞—à –≤—Ä–∞–≥ - {search(users_id[i - 1])}")
        # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        burg[str(users_id[i])] = {"ingredients": {}, "thorns": 0}
        for v in (invent["inventar"][search(users_id[i])]["burger"]):
            if v != '':
                burg[str(users_id[i])]["ingredients"][v] = [ingredient[v]['hp'], ingredient[v]['hp']]
    fight(id_fight)


# –ú–æ–¥—É–ª—å –±–æ—è
def fight(id_fight):
    useless = 0
    t = []
    z = []
    global figh
    global e_t
    print(figh)
    id_1 = figh[id_fight][0]
    id_2 = figh[id_fight][1]
    f = open("burger_data.json", 'r+', encoding="utf-8")
    burg = json.load(f)
    f.close()
    # –±–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ –º–æ–º–µ–Ω—Ç–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ—Ç–ª–µ—Ç—ã –≤ –±—É—Ä–≥–µ—Ä–µ
    while '–ö–æ—Ç–ª–µ—Ç–∞ üü§' in list(burg[str(id_1)]["ingredients"]) and "–ö–æ—Ç–ª–µ—Ç–∞ üü§" in list(burg[str(id_2)]["ingredients"]):
        f = open("burger_data.json", 'r+', encoding="utf-8")
        burg = json.load(f)
        f.close()
        list_id = list(burg[str(id_1)]["ingredients"])
        list_id_2 = list(burg[str(id_2)]["ingredients"])
        max_len = [len(list_id), len(list_id_2)]
        for g in range(0, max(max_len)):
            if g < len(list_id):
                e_t[id_fight] = "False"
                f = open("end_turn.json", 'w', encoding='utf8')
                json.dump(e_t, f, ensure_ascii=False)
                f.close()
                bot.send_message(int(id_1), f"{list_id[g]} –∞—Ç–∞–∫—É–µ—Ç ")
                if list_id[g] == "–ë—É–ª—É–∫–∞ ü•ñ":
                    e_t[id_fight] = "True"
                    print(f)
                elif ingredient[list_id[g]]['skill'][0] == damage:
                    ingredient[list_id[g]]['skill'][0](str(id_fight), list_id[g],
                                                       ingredient[list_id[g]]['skill'][1], id_1, id_2)
                elif ingredient[list_id[g]]['skill'][0] != damage:
                    ingredient[list_id[g]]['skill'][0](str(id_fight), ingredient[list_id[g]]['skill'][1], id_1, id_2)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–∞—è –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ-–±—ã –±–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫—É –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –ø–µ—Ä–≤—ã–π –Ω–µ –≤—ã–±—Ä–∞–ª –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            while e_t[id_fight] == "False":
                useless += 0
            if g < len(list_id_2):
                e_t[id_fight] = "False"
                f = open("end_turn.json", 'w', encoding='utf8')
                json.dump(e_t, f, ensure_ascii=False)
                f.close()
                bot.send_message(int(id_2), f"–ë—É—Ä–≥–µ—Ä –∞—Ç–∞–∫—É–µ—Ç {list_id_2[g]}-–æ–π")
                if list_id_2[g] == "–ë—É–ª—É–∫–∞ ü•ñ":
                    e_t[id_fight] = "True"
                elif ingredient[list_id_2[g]]['skill'][0] == damage:
                    ingredient[list_id_2[g]]['skill'][0](str(id_fight), list_id_2[g],
                                                       ingredient[list_id_2[g]]['skill'][1], id_2, id_1)
                elif ingredient[list_id_2[g]]['skill'][0] != damage:
                    ingredient[list_id_2[g]]['skill'][0](str(id_fight), ingredient[list_id_2[g]]['skill'][1], id_2, id_1)
            while e_t[id_fight] == "False":
                useless += 0
        f = open("burger_data.json", 'r+', encoding="utf-8")
        burg = json.load(f)
        f.close()
        # –ü–æ–∏—Å–∫ —É–º–µ—Ä—â–∏—Ö –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
        for x, y in burg[str(id_1)]["ingredients"].items():
            if y[0] <= 0:
                z.append(x)
        for x, y in burg[str(id_2)]["ingredients"].items():
            if y[0] <= 0:
                t.append(x)
        # –£–¥–∞–ª–µ–Ω–∏–µ —É–º–µ—Ä—à–∏—Ö –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
        for i in t:
            del burg[str(id_2)]["ingredients"][i]
        for i in z:
            del burg[str(id_1)]["ingredients"][i]
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if '–∫–æ—Ç–ª–µ—Ç–∞' not in list(burg[str(id_1)]["ingredients"]):
            bot.send_message(int(id_1), f"–ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {id_2}")
            bot.send_message(int(id_2), f"–ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {id_2}")
            return
        elif '–∫–æ—Ç–ª–µ—Ç–∞' not in list(burg[str(id_2)]["ingredients"]):
            bot.send_message(int(id_1), f"–ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {id_1}")
            bot.send_message(int(id_2), f"–ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {id_1}")
            return
        else:
            bot.send_message(int(id_1), f"–°–ª–µ–¥—É—é—â–∏–π –∫—Ä—É–≥")
            bot.send_message(int(id_2), f"–°–ª–µ–¥—É—é—â–∏–π –∫—Ä—É–≥")

        t = []
        z = []

    del fight[id_fight]
    del burg[str(id_1)]
    del burg[str(id_2)]

    pass


# –§—É–Ω–∫—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
def damage(id_fight, ingred_1, value, id_1, id_2):
    global burg
    global inf
    global figh
    markup = types.InlineKeyboardMarkup(row_width=1)
    g = 0
    for i in burg[id_2]["ingredients"]:
        g += 1
        btn = types.InlineKeyboardButton(text=f"{g}: {i}", callback_data=f"place attack{i}")
        markup.add(btn)
    inf[id_1] = [id_2, ingred_1, value, id_fight]
    bot.send_message(int(id_1), "–í–æ—Ç –∫—É–¥–∞ –≤—ã –º–æ–∂–∏—Ç–µ –∫—É—Å–Ω—É—Ç—å –∞–ø–ø–∞–Ω–µ–Ω—Ç–∞", reply_markup=markup)
    f = open("trash.json", 'w', encoding='utf8')
    json.dump(inf, f, ensure_ascii=False)
    f.close()


def damage_play(id_1, ingred_2):
    global burg
    global inf
    global e_t
    id_2 = inf[str(id_1)][0]
    ingred_1 = inf[str(id_1)][1]
    value = inf[str(id_1)][2]
    id_fight = inf[str(id_1)][3]
    if burg[id_2]["thorns"] != 0:
        burg[id_1]["ingredients"][ingred_1][0] -= burg[id_2]["thorns"]
        burg[id_2]["thorns"] = 0
    burg[id_2]["ingredients"][ingred_2][0] -= int(value)
    e_t[id_fight ] = "True"
    del inf[str(id_1)]
    f = open("trash.json", 'w', encoding='utf8')
    json.dump(inf, f, ensure_ascii=False)
    f.close()



def heal(id_fight, value, id_1, id_2):
    global burg
    global inf
    markup = types.InlineKeyboardMarkup(row_width=1)
    g = 0
    for i in burg[id_1]["ingredients"]:
        g += 1
        btn = types.InlineKeyboardButton(text=f"{g}: {i}", callback_data=f"place heal{i}")
        markup.add(btn)
    inf[id_1] = [id_2, value, id_fight]
    bot.send_message(int(id_1), "–í–æ—Ç –∫—É–¥–∞ –≤—ã –º–æ–∂–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—è", reply_markup=markup)
    f = open("trash.json", 'w', encoding='utf8')
    json.dump(inf, f, ensure_ascii=False)
    f.close()


def heal_play(id_1, ingred):
    global burg
    global e_t
    print(inf[str(id_1)])
    value = inf[str(id_1)][1]
    id_fight = inf[str(id_1)][2]
    if burg[str(id_1)]["ingredients"][ingred][0] + int(value) >= burg[str(id_1)]["ingredients"][ingred][1]:
        burg[str(id_1)]["ingredients"][ingred][0] = burg[str(id_1)]["ingredients"][ingred][1]
    else:
        burg[str(id_1)]["ingredients"][ingred][0] += int(value)
    print(e_t[id_fight], 5)
    e_t[id_fight] = "True"
    print(e_t[id_fight], 6)


def thorn(id_fight, value, id_1, id_2):
    global burg
    global figh
    global e_t
    bot.send_message(int(id_1), "–í–∞—à –±—É—Ä–≥–µ—Ä –∑–∞—à–∏–ø–æ–≤–∞–Ω")
    burg[str(id_1)]["thorns"] += int(value)
    e_t[id_fight] = "True"


def armor(id_fight, value, id_1, id_2):
    global burg
    markup = types.InlineKeyboardMarkup(row_width=1)
    g = 0
    for i in burg[id_1]["ingredients"]:
        g += 1
        btn = types.InlineKeyboardButton(text=f"{g}: {i}", callback_data=f"place armor{i}")
        markup.add(btn)
    inf[id_1] = [id_2, value, id_fight]
    bot.send_message(int(id_1), "–í–æ—Ç –∫—É–¥–∞ –≤—ã –º–æ–∂–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—â–∏—Ç—ã", reply_markup=markup)
    f = open("trash.json", 'w', encoding='utf8')
    json.dump(inf, f, ensure_ascii=False)
    f.close()


def armor_play(id_1, ingred):
    global burg
    global e_t
    print(inf[str(id_1)])
    value = inf[str(id_1)][1]
    id_fight = inf[str(id_1)][2]
    burg[str(id_1)]["ingredients"][ingred][1] += int(value)
    burg[str(id_1)]["ingredients"][ingred][0] += int(value)
    print(e_t[id_fight], 5)
    e_t[id_fight] = "True"
    print(e_t[id_fight], 6)


def fire(id_fight, value, id_1, id_2):
    global burg
    markup = types.InlineKeyboardMarkup(row_width=1)
    g = 0
    for i in burg[id_1]["ingredients"]:
        g += 1
        btn = types.InlineKeyboardButton(text=f"{g}: {i}", callback_data=f"place fire{i}")
        markup.add(btn)
    inf[id_1] = [id_2, value, id_fight]
    bot.send_message(int(id_1), "–í–æ—Ç –∫—É–¥–∞ –≤—ã –º–æ–∂–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—â–∏—Ç—ã", reply_markup=markup)
    f = open("trash.json", 'w', encoding='utf8')
    json.dump(inf, f, ensure_ascii=False)
    f.close()


def fire_play(id_1, ingred):
    global burg
    global e_t
    m = []
    id_2 = inf[str(id_1)][0]
    value = inf[str(id_1)][1]
    id_fight = inf[str(id_1)][2]
    for i in burg[str(id_2)]["ingredients"]:
        m.append(i)
    burg[str(id_2)]["ingredients"][ingred][0] -= int(value)
    if m.index(ingred) >= 1:
        burg[str(id_2)]["ingredients"][m[m.index(ingred) - 1]][0] -= int(value) // 2
    if m.index(ingred) <= len(m) - 2:
        burg[str(id_2)]["ingredients"][m[m.index(ingred) + 1]][0] -= int(value) // 2
    print(e_t[id_fight], 5)
    e_t[id_fight] = "True"
    print(e_t[id_fight], 6)


def vampirism(id_fight, value, id_1, id_2):
    global burg
    markup = types.InlineKeyboardMarkup(row_width=1)
    g = 0
    for i in burg[id_1]["ingredients"]:
        g += 1
        btn = types.InlineKeyboardButton(text=f"{g}: {i}", callback_data=f"place fire{i}")
        markup.add(btn)
    inf[id_1] = [id_2, value, id_fight]
    bot.send_message(int(id_1), "–í–æ—Ç –≥–¥–µ –≤—ã –º–æ–∂–∏—Ç–µ –≤—ã—Å–æ—Å–∞—Ç—å —Å–æ–∫", reply_markup=markup)


def vampirism_play(id_1, ingred):
    global burg
    id_2 = inf[str(id_1)][0]
    value = inf[str(id_1)][1]
    id_fight = inf[str(id_1)][2]
    burg[str(id_2)]["ingredients"][ingred][0] -= int(value)
    burg[str(id_1)]["ingredients"]['–∫—Ä–∞–ø–∏–≤–∞'][0] += int(value)
    burg[str(id_1)]["ingredients"]['–∫—Ä–∞–ø–∏–≤–∞'][1] += int(value)
    print(e_t[id_fight], 5)
    e_t[id_fight] = "True"
    print(e_t[id_fight], 6)

def coloring(id, value):
    f = open("burger_data.txt", 'r+')
    burg = json.load(f)
    f.close()
    burg[str(id)]["color"] = 1
    f = open("burger_data.txt", 'w', encoding='utf8')
    json.dump(burg, f, ensure_ascii=False)
    f.close()



ingredient = {'—Ç–æ–º–∞—Ç': {'hp': 10, 'skill': [heal, 5]}, '—Å–∞–ª–∞—Ç': {'hp': 14, 'skill': [heal, 7]},
              '–æ–≥—É—Ä–µ—Ü': {'hp': 20, 'skill': [damage, 5]}, '—Å–æ–ª—ë–Ω—ã–π_–æ–≥—É—Ä–µ—Ü': {'hp': 5, 'skill': [thorn, 5]},
              '–º–æ—Ä–∫–æ–≤—å': {'hp': 14, 'skill': [damage, 7]}, '—á–µ—Å–Ω–æ–∫': {'hp': 8, 'skill': [thorn, 8]},
              '–∫–∞–ø—É—Å—Ç–∞': {'hp': 20, 'skill': [heal, 10]}, '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å': {'hp': 10, 'skill': [damage, 5]},
              '—Ä–µ–ø–∞': {'hp': 16, 'skill': [heal, 8]}, '–∫—Ä–∞–ø–∏–≤–∞': {'hp': 50, 'skill': [vampirism, 25]},
              '–æ—Å—Ç—Ä—ã–π_–ø–µ—Ä–µ—Ü': {'hp': 30, 'skill': [fire, 15]},
              "–ö–æ—Ç–ª–µ—Ç–∞ üü§": {'hp': 50, 'skill': [damage, 1500]}}

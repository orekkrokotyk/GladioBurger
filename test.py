from config import *
from db_operations import *
from chest import *
# from inventory import *
from inventory import inventory_call, my_burger, change_burger, remake_burger, add_chest, add_ingredient, choice_ingredient, add_burger
from fight_bot import *
from main import main_menu

import telebot
from telebot import types


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º""")
    bot.register_next_step_handler(message, second_message)


def second_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    find_id = search_nickname(message)
    if len(find_id) == 0:
        size_but_1 = types.KeyboardButton("–î—Ä—É–≥–æ–π –Ω–∏–∫")
        size_but_2 = types.KeyboardButton(f"–†–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—è —Å –Ω–∏–∫–æ–º {message.text}")
        markup.add(size_but_1)
        markup.add(size_but_2)
        bot.send_message(message.chat.id, f"""–¢–∞–∫–æ–≥–æ –Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∏–ª–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —ç—Ç–∏–º""", reply_markup=markup)
    else:
        size_but_1 = types.KeyboardButton(f"–í—Ö–æ–¥ —Å –Ω–∏–∫–æ–º {message.text}")
        size_but_2 = types.KeyboardButton("–î—Ä—É–≥–æ–π –Ω–∏–∫")
        markup.add(size_but_1)
        markup.add(size_but_2)
        bot.send_message(message.chat.id, f"""–¢–∞–∫–æ–π –Ω–∏–∫ –µ—Å—Ç—å, –º–æ–∂–∏—Ç–µ –≤–æ–π—Ç–∏ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π""", reply_markup=markup)


@bot.message_handler(commands=['quit'])
def bot_quit_message(message):
    quit_message(message)

@bot.message_handler(content_types=['text'])
def func(message):
    global i_nick
    global invent
    global figh
    mes = message.text
    if mes == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = main_menu()
        bot.send_message(message.chat.id, f"""–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏–≥—Ä—ã""", reply_markup=markup)
    if mes[:11] == "–†–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—è":
        nick = mes[20:]
        bot.send_message(message.chat.id, f"""–†–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Å—è, –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å""")
        bot.register_next_step_handler(message, pas, nick)
    elif mes[:4] == "–í—Ö–æ–¥":
        nick = mes[13:]
        bot.send_message(message.chat.id, f"""–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å""")
        bot.register_next_step_handler(message, log_pass, nick)
    elif mes == "–î—Ä—É–≥–æ–π –Ω–∏–∫":
        start_message(message)
    if mes == "–ö–µ–π—Å—ã":
        get_chest(message)
    elif mes == '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å':
        inventory_call(message)
    elif mes == "–ú–æ–π –±—É—Ä–≥–µ—Ä":
        my_burger(message)
    elif mes == "–í –ë–æ–π!":
        wait_list(message)
    if mes == "–ò–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –ë—É—Ä–≥–µ—Ä":
        change_burger(message)
    elif mes == "–ü–æ–ª–Ω–æ—Å—Ç—å—é –µ–≥–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å":
        remake_burger(message)
    if mes == "–ü—Ä–µ–¥—ä–∏—Å—Ç–æ—Ä–∏—è –º–∏—Ä–∞":
        pass
    elif mes == "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ":
        pass
    if mes.split()[0] == "common" or mes.split()[0] == "rare" or mes.split()[0] == "epic" or mes.split()[0] == "legendary" or mes.split()[0] == "mythical":
        add_chest(message)


@bot.callback_query_handler(func=lambda callback: callback.data)
def callback_query(callback):
    global invent
    global i_nick
    i_nick = search(callback.message.chat.id)
    bot.delete_message(callback.message.chat.id, callback.message.id)
    if callback.data[:4] == "sell":
        bot.send_message(callback.message.chat.id, f"""–í—ã –ø—Ä–æ–¥–∞–ª–∏ {callback.data[4:]}""")
        invent["inventar"][i_nick]["many"] += market[ingredient_property[callback.data[4:]]['quality']] // 3
        g = f"{callback.data[4:]}-{ingredient_property[callback.data[4:]]['quality']}"
        print(g)
        p = (invent["inventar"][i_nick]["items"]).index(g)
        del invent["inventar"][i_nick]["items"][p]
        bot.send_message(callback.message.chat.id, f"–£ –≤–∞—Å {invent['inventar'][i_nick]['many']} –º–∏–Ω–µ—Ç")
        main_menu()
    if callback.data == "common-–°—É–Ω–¥—É–∫" or callback.data == "rare-–°—É–Ω–¥—É–∫" or callback.data == "epic-–°—É–Ω–¥—É–∫" or callback.data == "legendary-–°—É–Ω–¥—É–∫" or callback.data == "mythical-–°—É–Ω–¥—É–∫":
        open_chest(callback)
    elif (callback.data.split('-'))[0] in ingredient:
        add_ingredient(callback)
    elif callback.data in burger_update:
        choice_ingredient(callback)
    elif callback.data in add_cutlet:
        add_burger(callback)
    elif callback.data[:11] == "description":
        bot.send_message(callback.message.chat.id, ingredient_property[callback.data[11:]]["description"])
    elif "–ë—É–ª—É–∫–∞ ü•ñ" in callback.data:
        bot.send_message(callback.message.chat.id, f"""C –ë—É–ª–∫–æ–π –Ω–µ–ª—å–∑—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å""")
        id_1 = str(callback.message.chat.id)
        id_2 = inf[str(id_1)][0]
        value = inf[str(id_1)][1]
        id_fight = inf[str(id_1)][2]
        ingred_1 = inf[str(id_1)][3]
        ingredient[inf[id_1][-1]]["skill"][0](id_fight, value, id_1, id_2, ingred_1)
    elif callback.data[:12] == "place attack":
        damage_play(callback.from_user.id, callback.data[12:])
    elif callback.data[:10] == "place heal":
        heal_play(callback.from_user.id, callback.data[10:])
    elif callback.data[:11] == "place armor":
        armor_play(callback.from_user.id, callback.data[11:])
    elif callback.data[:10] == "place fire":
        fire_play(callback.from_user.id, callback.data[10:])
    elif callback.data[:10] == "place prov":
        god_play(callback.from_user.id, callback.data[10:])
    elif callback.data[:10] == "place copy":
        copy_play(callback.from_user.id, callback.data[10:])
    elif callback.data[:12] == "place snipe1":
        snipe_play(callback.from_user.id, callback.data[12:])
    elif callback.data[:12] == "place snipe2":
        snipe_2_play(callback.from_user.id, callback.data[12:])





# –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
def quit_message(message):
    connection = sqlite3.connect('Users.db', check_same_thread=False)
    cursor = connection.cursor()
    g = cursor.execute(f"""SELECT user_id FROM User_id_nick""").fetchall()
    s = [g[i][0] for i in range(len(g))]
    cursor.execute(
        f"""UPDATE User_id_nick SET nick = '{message.from_user.id}' WHERE user_id = '{message.from_user.id}'""")
    connection.commit()
    connection.close()
    bot.send_message(message.chat.id, f"""–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞""")
    start_message(message)



def exit_handler():
    with open("invent_data.json", 'w', encoding="utf-8") as fp:
        json.dump(invent, fp, ensure_ascii=False)
        fp.close()
    with open("fight_data.json", 'w', encoding="utf-8") as fp:
        json.dump(figh, fp, ensure_ascii=False)
        fp.close()
    f = open("burger_data.json", 'w', encoding='utf8')
    json.dump(burg, f, ensure_ascii=False)
    f.close()
    f = open("end_turn.json", 'w', encoding='utf8')
    json.dump(e_t, f, ensure_ascii=False)
    f.close()
    print('–ñ–û–ü–ê')


atexit.register(exit_handler)

bot.infinity_polling()
